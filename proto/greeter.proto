syntax = "proto3";

package gogotest;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
// import "protoc-gen-swagger/options/annotations.proto";
// import "github.com/mwitkow/go-proto-validators/validator.proto";
// import "validate/validate.proto";

option go_package = "proto";

// option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
//   info: {
//     version: "1.0";
//   };
//   external_docs: {
//     url: "https://github.com/iwaltgen/grpc-gogo-test";
//     description: "gRPC gogo test repository";
//   }
//   schemes: HTTPS;
// };

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;


service GreeterService {

	rpc SayHello (HelloRequest) returns (HelloReply);

  rpc SayTime (google.protobuf.Empty) returns (google.protobuf.Timestamp);

  rpc SubscribeTime (google.protobuf.Empty) returns (stream google.protobuf.Timestamp);

	// rpc SayHello (HelloRequest) returns (HelloReply) {
	// 	option(google.api.http) = {
	// 		get: "/api/hello/{name}",
	// 	};
  // }

  // rpc SayTime (google.protobuf.Empty) returns (google.protobuf.Timestamp) {
	// 	option(google.api.http) = {
	// 		get: "/api/time",
	// 	};
  // }
}

message HelloRequest {
	string name = 1;
	// string name = 1 [(validate.rules).string.len = 3];
}

message HelloReply {
	string message = 1;
}
